#!/usr/bin/env python3

import os
from pprint import pprint
import time
import yaml

from kubernetes import client, config as k_config, watch
from kubernetes.client.rest import ApiException

from adjust import Adjust, AdjustError

DEBUG = os.getenv('DEBUG')
CONFIG_PATH = os.environ.get('OPTUNE_CONFIG', './config.yaml')

COMPONENT_NAME = 'argocd'

# rollout namespaced object requirements
GROUP = "argoproj.io"
VERSION = "v1alpha1"
PLURAL = "rollouts"

DEFAULTS = {
    'mem': { 'min': 0.125, 'max': 4.0, 'step': 0.125 },
    'cpu': { 'min': 0.125, 'max': 4.0, 'step': 0.125 },
    'replicas': { 'min': 0, 'max': 6, 'step': 1 }
}

DEFAULT_TIMEOUT = 600

class RolloutAdjust(Adjust):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Load config first so that its info can alter the context of the client if needed
        with open(CONFIG_PATH) as conf_file:
            self.config = yaml.safe_load(conf_file)["rollouts"]
        assert self.config.get("name"), "No rollouts name configured"
        assert self.config.get("namespace"), "No rollouts namespace configured"
        assert self.config.get("container_name"), "No rollouts container_name configured"

        if os.getenv('KUBERNETES_SERVICE_HOST'): # If running in a kubernetes cluster
            k_config.load_incluster_config()
        else:
            k_config.load_kube_config()
        self.api = client.CustomObjectsApi()

    def query(self):
        body = { # First let's ensure that we will auto-promote changes
            "spec": {"strategy": {"blueGreen": {"autoPromotionEnabled": True,}}}
        }

        changing = self._try_patch_object(body)
        tgt_resource = self.api.get_namespaced_custom_object(GROUP, VERSION, self.config['namespace'], PLURAL, self.config['name'])
        self._watch_object(changing)
        self.debug(tgt_resource)

        # determine which container to query
        container_index = 0
        for i, n in enumerate(tgt_resource["spec"]["template"]["spec"]["containers"]):
            if self.config['container_name'] == n["name"]:
                container_index = i
                break

        # get the container template
        app = tgt_resource["spec"]["template"]["spec"]["containers"][container_index]
        #self.debug(f"index: {container_index} app: {app}")
        settings = self.config.get('settings', {})
        for sn in ['cpu', 'mem', 'replicas']:
            settings.setdefault(sn, {})['min'] = settings.get(sn, {}).get('min', DEFAULTS[sn]['min'])
            settings[sn]['max'] = settings.get(sn, {}).get('max', DEFAULTS[sn]['max'])
            settings[sn]['step'] = settings.get(sn, {}).get('step', DEFAULTS[sn]['step'])
            settings[sn]['type'] = 'range'

        settings['replicas']['value'] = tgt_resource["spec"]["replicas"]
        settings['cpu']['value'] = _cpuunits(app['resources']['limits']['cpu'])
        settings['mem']['value'] = _memunits(app['resources']['limits']['memory'])

        if self.config.get('env'):
            env_map = { e['name']: e['value'] for e in app['env'] }
            for en, ev in self.config['env'].items():
                ev = dict(ev) # make a copy (only need shallow)
                if 'encoder' in ev:
                    for name, setting in _describe_encoder(
                        env_map.get(en), 
                        ev['encoder'],
                        exception_context='an environment variable {}'
                        ''.format(en)
                    ):
                        settings[name] = setting
                else:
                    def_val = ev.pop('default', None)
                    cur_val = env_map.get(en)
                    if cur_val is None and def_val is None:
                        raise Exception('Unable to query environment variable {}. No value defined in target container and no default configured'.format(en))
                    settings[en] = {**ev, 'value': (cur_val if cur_val is not None else def_val)}

        command = self.config.get('command')
        if command and command.get('encoder'):
            for name, setting in _describe_encoder(
                app.get('command', []), 
                command['encoder'],
                exception_context='a command section'
            ):
                settings[name] = setting

        return {'application': {'components':{ COMPONENT_NAME: {'settings': settings} }}}

    def adjust(self, input_data):
        input_settings = input_data['application']['components'].get(COMPONENT_NAME, {}).get('settings')
        if not input_settings:
            return {"status": "ok", "reason": "Skipped due to no data"}

        tgt_resource = self.api.get_namespaced_custom_object(GROUP, VERSION, self.config['namespace'], PLURAL, self.config['name'])

        # determine which container to update
        container_index = 0
        for i, n in enumerate(tgt_resource["spec"]["template"]["spec"]["containers"]):
            if self.config['container_name'] == n["name"]:
                container_index = i
                break

        # get the container template
        app = tgt_resource["spec"]["template"]["spec"]["containers"][container_index]

        # Update resources
        cpu_val, mem_val = input_settings.pop('cpu')['value'], '{}Gi'.format(input_settings.pop('mem')['value'])
        app["resources"].update({
            "limits": {"cpu": cpu_val, "memory": mem_val},
            "requests": {"cpu": cpu_val, "memory": mem_val},
        })

        # Update replica count
        tgt_resource["spec"]["replicas"] = input_settings.pop('replicas')['value']

        # Update command
        command = self.config.get('command')
        if command and command.get('encoder'):
            tgt_resource['command'], encoded_settings = _encode_encoder(input_settings, command['encoder'], expected_type=list)
            # Prevent encoded settings from further processing
            for setting in encoded_settings:
                del input_settings[setting]

        # Update env settings
        if self.config.get('env') and input_settings:
            app['env'] = app['env'] or []
        for sn, sv in input_settings.items():
            if sn in self.config.get('env', {}):
                s_conf = self.config['env'][sn]
                if 'encoder' in s_conf:
                    val, encoded_settings = _encode_encoder(input_settings, ev['encoder'], expected_type=str)
                    sv = {'value': val}

                    # Prevent encoded settings from further processing
                    for setting in encoded_settings:
                        del input_settings[setting]

                if app['env']:
                    tgt_env = next(iter(e for e in app['env'] if e['name'] == sn), None)
                    if tgt_env:
                        tgt_env['value'] = str(sv['value']) # Note tgt_env is a reference so updating its value is reflected in tgt_cont
                    else:
                        tgt_cont.env.append({'name': sn, 'value': str(sv['value'])})
                else:
                    app['env'] = [{'name': sn, 'value': sv['value']}]
            else:
                self.print_json_error("warning", "None", 
                    "Unknown setting input recieved {}: {}".format(sn, sv))

        tgt_resource["spec"]["strategy"]["blueGreen"]["autoPromotionEnabled"] = True # ensure that we will auto-promote changes

        changing = self._try_patch_object(tgt_resource)

        self._watch_object(changing)


    def _watch_object(self, changing):
        """
        patch an object (patch_namespaced_custom_object)
        returns: rollout-selector
        raises: non ApiExceptions
        """
        start_time = time.time()
        while changing is True:
            try:
                resource_list = self.api.list_namespaced_custom_object(
                    GROUP,
                    VERSION,
                    self.config['namespace'],
                    PLURAL,
                    watch=False,
                    label_selector="app=web", # TODO?
                )
                if DEBUG:
                    pprint(resource_list)
                    print("Resource list status:")
                # active_selector = { TODO: Not being used
                #     "active": resource_list["items"][0]["status"]["blueGreen"][
                #         "activeSelector"
                #     ]
                # }
                if (
                    resource_list["items"][0]["status"]["blueGreen"]["activeSelector"]
                    == resource_list["items"][0]["status"]["blueGreen"]["previewSelector"]
                ):
                    changing = False
                    if DEBUG:
                        print("Change completed")
                    return # active_selector TODO: Not being used
                
                if DEBUG:
                    print("Resource status:")
                    pprint(resource_list["items"][0]["status"]["blueGreen"]["activeSelector"])

            except ApiException as e:
                self.print_json_error("failure", e.__class__.__name__, 
                    "Exception when calling CustomObjectsApi->list_namespaced_custom_object: %s\n" % str(e))

            if time.time() - start_time > self.config.get('promote_timeout', DEFAULT_TIMEOUT):
                raise AdjustError('Timed out waiting for activeSelector to match previewSelector', reason='timeout')

            time.sleep(self.config.get('watch_timeout', 15))

    def _try_patch_object(self, body):
        """
        patch an object (patch_namespaced_custom_object)
        returns: True for success, False for error
        raises: non ApiExceptions
        """
        try:
            self.api.patch_namespaced_custom_object(GROUP, VERSION, self.config['namespace'], PLURAL, self.config['name'], body)
            return True
        except ApiException as e:
            self.print_json_error("failure", e.__class__.__name__, str(e))
            return False

def _cpuunits(s):
    '''convert a string for CPU resource (with optional unit suffix) into a number'''
    if s[-1] == "m":  # there are no units other than 'm' (millicpu)
        return float(s[:-1])/1000.0
    return float(s)


# valid mem units: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki
# nb: 'm' suffix found after setting 0.7Gi
mumap = {"E": 1000**6,  "P": 1000**5,  "T": 1000**4,  "G": 1000**3,  "M": 1000**2,  "K": 1000, "m": 1000**-1,
         "Ei": 1024**6, "Pi": 1024**5, "Ti": 1024**4, "Gi": 1024**3, "Mi": 1024**2, "Ki": 1024}


def _memunits(s):
    '''convert a string for memory resource (with optional unit suffix) into a number'''
    for u, m in mumap.items():
        if s.endswith(u):
            return float(s[:-len(u)]) * m
    return float(s)


def _import_encoder_base():
    try:
        return importlib.import_module('encoders.base')
    except ImportError:
        raise ImportError('Unable to import base for encoders.')


def _encoder_setting_name(setting_name, encoder_config):
    prefix = encoder_config['setting_prefix'] if 'setting_prefix' in encoder_config else ''
    return '{}{}'.format(prefix, setting_name)


def _describe_encoder(value, config, exception_context='a describe phase of an encoder'):
    encoder_base = _import_encoder_base()
    try:
        settings = encoder_base.describe(config, value or '')
        for name, setting in settings.items():
            yield (_encoder_setting_name(name, config), setting)
    except BaseException as e:
        raise Exception('Error while handling {}: {}'.format(exception_context, str(e)))


def _encode_encoder(settings, config, expected_type=None, exception_context='an encode phase of an encoder'):
    encoder_base = _import_encoder_base()
    try:
        sanitized_settings = settings
        prefix = config.get('setting_prefix')
        if prefix:
            sanitized_settings = dict(map(lambda i: (i[0].lstrip(prefix), i[1]),
                                          filter(lambda i: i[0].startswith(prefix), settings.items())))
        encoded_value, encoded_settings = encoder_base.encode(config, sanitized_settings, expected_type=expected_type)
        encoded_settings = list(map(lambda setting_name: _encoder_setting_name(setting_name, config), encoded_settings))
        return encoded_value, encoded_settings
    except BaseException as e:
        raise Exception('Error while handling {}: {}'.format(exception_context, str(e)))


if __name__ == "__main__":
    RolloutAdjust(
        VERSION,
        "Argo Rollouts driver for Opsani servo.\n"
        "Note: set OPTUNE_USE_DEFAULT_NAMESPACE=1 environment variable in the servo",
        supports_cancel=False,
        progress_interval=None).run()


